package simpledb;
import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends AbstractDbIterator {
	private final JoinPredicate joinPredicate;
	private final DbIterator dbIterator1;
	private final DbIterator dbIterator2;
	private final TupleDesc tupleDesc;
	
	private Tuple tuple2;
	
	// used for general join
	private Tuple tuple1;
	
	// used for equi join
	private final Map<Field, List<Tuple>> map;
	private Iterator<Tuple> listIterator;
	
    /**
     * Constructor.  Accepts to children to join and the predicate
     * to join them on
     *
     * @param p The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
    	this.joinPredicate = p;
    	this.dbIterator1 = child1;
    	this.dbIterator2 = child2;
    	this.tupleDesc = TupleDesc.combine(child1.getTupleDesc(), child2.getTupleDesc());
    	this.map = new HashMap<Field, List<Tuple>>();
    }

    /**
     * @see simpledb.TupleDesc#combine(TupleDesc, TupleDesc) for possible implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return tupleDesc;
    }

    public void open()
        throws DbException, NoSuchElementException, TransactionAbortedException {
    	dbIterator1.open();
    	dbIterator2.open();
    	if (dbIterator2.hasNext()) tuple2 = dbIterator2.next();
    	if (joinPredicate.getOp().equals(Predicate.Op.EQUALS)) {
    		while (dbIterator1.hasNext()) {
        		tuple1 = dbIterator1.next();
        		Field field1 = tuple1.getField(joinPredicate.getField1());
        		if (!map.containsKey(field1)) map.put(field1, new ArrayList<Tuple>());
        		map.get(field1).add(tuple1);
        	}
        	dbIterator1.close();
        	if (tuple2 != null) {
        		List<Tuple> list = map.get(tuple2.getField(joinPredicate.getField2()));
    			if (list != null) listIterator = list.iterator();
        	}
    	} else {
    		if (dbIterator1.hasNext()) tuple1 = dbIterator1.next();
    	}
    }

    public void close() {
    	super.close();
    	dbIterator1.close();
    	dbIterator2.close();
    	tuple1 = null;
    	tuple2 = null;
    	listIterator = null;
    	map.clear();
    }

    public void rewind() throws DbException, TransactionAbortedException {
    	dbIterator2.rewind();
    	if (dbIterator2.hasNext()) tuple2 = dbIterator2.next();
    	if (joinPredicate.getOp().equals(Predicate.Op.EQUALS)) {
    		if (tuple2 != null) {
    			List<Tuple> list = map.get(tuple2.getField(joinPredicate.getField2()));
    			if (list != null) listIterator = list.iterator();
    		}
    	} else {
    		dbIterator1.rewind();
    		if (dbIterator1.hasNext()) tuple1 = dbIterator1.next();
    	}
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no more tuples.
     * Logically, this is the next tuple in r1 cross r2 that satisfies the join
     * predicate.  There are many possible implementations; the simplest is a
     * nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of
     * Join are simply the concatenation of joining tuples from the left and
     * right relation. Therefore, if an equality predicate is used 
     * there will be two copies of the join attribute
     * in the results.  (Removing such duplicate columns can be done with an
     * additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple readNext() throws TransactionAbortedException, DbException {
    	if (joinPredicate.getOp().equals(Predicate.Op.EQUALS)) return equiReadNext();
    	else return generalReadNext();
    }
    
    private Tuple generalReadNext() throws TransactionAbortedException, DbException {
    	if (tuple1 == null || tuple2 == null) return null;
    	Tuple tuple = null;
    	while (tuple == null && tuple1 != null && tuple2 != null) {
    		if (joinPredicate.filter(tuple1, tuple2)) tuple = combineTupe(tuple1, tuple2);
    		if (!dbIterator1.hasNext() && !dbIterator2.hasNext()) {
    			tuple1 = null;
    			tuple2 = null;
    		} else {
    			if (!dbIterator2.hasNext()) {
    				tuple1 = dbIterator1.next();
    				dbIterator2.rewind();
    			}
    			tuple2 = dbIterator2.next();
    		}
    	}
    	return tuple;    	
    }
    
    private Tuple equiReadNext() throws TransactionAbortedException, DbException {
    	if (tuple2 == null) return null;
    	while ((listIterator == null || !listIterator.hasNext()) && dbIterator2.hasNext()) {
    		tuple2 = dbIterator2.next();
    		List<Tuple> list = map.get(tuple2.getField(joinPredicate.getField2()));
    		if (list != null) listIterator = list.iterator();
    	}
    	if (listIterator == null || !listIterator.hasNext()) return null;
    	tuple1 = listIterator.next();
	    return combineTupe(tuple1, tuple2);    	
    }
    
    private Tuple combineTupe(Tuple t1, Tuple t2) {
    	Tuple tuple = new Tuple(tupleDesc);
	    int tuple1NumFileds = t1.getTupleDesc().numFields();
	    int tuple2NumFields = t2.getTupleDesc().numFields();
	    for (int i = 0; i < tuple1NumFileds; i++) {
	    	tuple.setField(i, t1.getField(i));
	    }
	    for (int i = 0; i < tuple2NumFields; i++) {
	    	tuple.setField(tuple1NumFileds + i, t2.getField(i));
	    }
	    return tuple;      	
    }
}
